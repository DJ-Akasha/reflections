When would you want to use a remote repository rather than keeping all your work
local?

    Definitely when collaborating with others or when asking for help from others
    so that they can see the full context of the code. Also when creating something
    that could be useful to others and turning it into something that is open source.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

    You could potentially be making a large change that you wouldn't want your 
    collaborators to see until after you had verified that it works.

Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

	Forks are only used in the context of GitHub and are essentially like cloning. 
	Clones are copies of repositories or directories. Branches are part of the same
	repository as everything else in the repo. They are used for organising code
	when two or more versions of the code need to be different for example, one 
	branch is for adding a new feature that the developer isn't sure will actually
	work.

What is the benefit of having a copy of the last known state of the remote stored 
locally?
	
	If then there are any changes made by collaborators there will be a minimal
	amount of conflicts and therefore easier to resolve when merging your code
	to theirs.  

How would you collaborate without using Git or GitHub? What would be easier, and what 
would be harder?

	It would be very difficult to do without a system like Git and GitHub. There
	are other systems out there which I will not delve into for this exercise as
	I think the question is asking how would you cope if you had to use traditional
	sharing of files. It would be a nightmare! Files would be shared using email or
	dropbox or something and the likelihood of things getting lost or going wrong 
	is very high. I can't really thing of anything that might be easier. I think 
	it would just be really hard not to use Git and/or GitHub.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?

	If you're working in a collaborative project then you will want to only make 
	changes in your own branch before committing them just in case you get halfway
	through and realise that it doesn't work or you decide to change it completely.
	You could also use a separate branch for your own projects where you might decide
	to add a new feature but aren't sure if it is the right thing to do.

	The benefits would be to avoid getting to a point where you've made many different
	changes and commits and realising that the new feature isn't going to work. It
	would be a nightmare to deal with if that was the case.